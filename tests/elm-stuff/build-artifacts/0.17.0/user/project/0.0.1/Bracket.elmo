var _user$project$Bracket$bracStyle = _elm_lang$html$Html_Attributes$style(
	_elm_lang$core$Native_List.fromArray(
		[
			{ctor: '_Tuple2', _0: 'width', _1: '100%'},
			{ctor: '_Tuple2', _0: 'height', _1: '40px'},
			{ctor: '_Tuple2', _0: 'padding', _1: '10px 0'},
			{ctor: '_Tuple2', _0: 'font-size', _1: '2'},
			{ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
			{ctor: '_Tuple2', _0: 'color', _1: '#f60'}
		]));
var _user$project$Bracket$revStyle = _elm_lang$html$Html_Attributes$style(
	_elm_lang$core$Native_List.fromArray(
		[
			{ctor: '_Tuple2', _0: 'width', _1: '100%'},
			{ctor: '_Tuple2', _0: 'height', _1: '40px'},
			{ctor: '_Tuple2', _0: 'padding', _1: '10px 0'},
			{ctor: '_Tuple2', _0: 'font-size', _1: '2em'},
			{ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
			{ctor: '_Tuple2', _0: 'color', _1: 'red'}
		]));
var _user$project$Bracket$strStyle = _elm_lang$html$Html_Attributes$style(
	_elm_lang$core$Native_List.fromArray(
		[
			{ctor: '_Tuple2', _0: 'width', _1: '100%'},
			{ctor: '_Tuple2', _0: 'height', _1: '40px'},
			{ctor: '_Tuple2', _0: 'padding', _1: '10px 0'},
			{ctor: '_Tuple2', _0: 'font-size', _1: '2em'},
			{ctor: '_Tuple2', _0: 'text-align', _1: 'center'}
		]));
var _user$project$Bracket$pageFooter = A2(
	_elm_lang$html$Html$div,
	_elm_lang$core$Native_List.fromArray(
		[]),
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$footer,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$a,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$href('http://j.mp/reactiveNotFad'),
							_elm_lang$html$Html_Attributes$target('_blank'),
							_elm_lang$html$Html_Attributes$rel('noopener noreferrer')
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Reactive is not a fad')
						]))
				])),
			A2(
			_elm_lang$html$Html$footer,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$a,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$href('http://j.mp/relevantKG'),
							_elm_lang$html$Html_Attributes$target('_blank'),
							_elm_lang$html$Html_Attributes$rel('noopener noreferrer')
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Stay relevant via KG')
						]))
				])),
			A2(
			_elm_lang$html$Html$footer,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$a,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$href('http://edu.kgisl.com'),
							_elm_lang$html$Html_Attributes$target('_blank'),
							_elm_lang$html$Html_Attributes$rel('noopener noreferrer')
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('The Campus Inside')
						]))
				]))
		]));
var _user$project$Bracket$title = F2(
	function (message, times) {
		return _elm_lang$html$Html$text(
			_elm_lang$core$String$trimRight(
				A2(
					_elm_lang$core$String$repeat,
					times,
					_elm_lang$core$String$toUpper(
						A2(_elm_lang$core$Basics_ops['++'], message, ' ')))));
	});
var _user$project$Bracket$pageHeader = A2(
	_elm_lang$html$Html$h1,
	_elm_lang$core$Native_List.fromArray(
		[]),
	_elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Bracket$title, 'Validator', 1)
		]));
var _user$project$Bracket$bracketHeader = function (display) {
	return display ? A2(
		_elm_lang$html$Html$h2,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$Bracket$title, 'Bracket Map', 1)
			])) : A2(
		_elm_lang$html$Html$h2,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _user$project$Bracket$getIndexedCharacters = function (_p0) {
	return A2(
		_elm_lang$core$List$indexedMap,
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		_elm_lang$core$String$toList(_p0));
};
var _user$project$Bracket$isValid = function (bm) {
	var _p1 = bm;
	var expression = _p1.expression;
	var stack = _p1.stack;
	var isValid = _p1.isValid;
	var isBalanced = _p1.isBalanced;
	var _p2 = {ctor: '_Tuple2', _0: isBalanced, _1: isValid};
	if (_p2._0 === true) {
		if (_p2._1 === true) {
			return ' is valid';
		} else {
			return ' is invalid';
		}
	} else {
		return ' is imbalanced';
	}
};
var _user$project$Bracket$isStackEmpty = function (s) {
	return _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$String$length(s),
		0) ? 'Empty' : '';
};
var _user$project$Bracket$stackHeader = F2(
	function (display, stack) {
		return display ? A2(
			_elm_lang$html$Html$h3,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'Stack ',
						_user$project$Bracket$isStackEmpty(stack)))
				])) : A2(
			_elm_lang$html$Html$h3,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[]));
	});
var _user$project$Bracket$stackItem = function (_p3) {
	var _p4 = _p3;
	return A2(
		_elm_lang$html$Html$li,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$span,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('index')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						_elm_lang$core$Basics$toString(_p4._0))
					])),
				A2(
				_elm_lang$html$Html$span,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('token')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						_elm_lang$core$String$fromChar(_p4._1))
					]))
			]));
};
var _user$project$Bracket$stackList = F2(
	function (display, stack) {
		var entryItems = _elm_lang$core$List$reverse(
			_user$project$Bracket$getIndexedCharacters(
				_elm_lang$core$String$reverse(stack)));
		var items = display ? A2(
			_elm_lang$core$List$map,
			_user$project$Bracket$stackItem,
			A2(
				_elm_lang$core$Basics_ops['++'],
				entryItems,
				_elm_lang$core$Native_List.fromArray(
					[
						{
						ctor: '_Tuple2',
						_0: -1,
						_1: _elm_lang$core$Native_Utils.chr('-')
					}
					]))) : _elm_lang$core$Native_List.fromArray(
			[]);
		return A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$ul,
					_elm_lang$core$Native_List.fromArray(
						[]),
					items),
					A2(
					_elm_lang$html$Html$footer,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							A2(
							_elm_lang$html$Html$a,
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$html$Html_Attributes$href(
									A2(_elm_lang$core$Basics_ops['++'], _user$project$Version$gitRepo, '/issues/new')),
									_elm_lang$html$Html_Attributes$target('_blank'),
									_elm_lang$html$Html_Attributes$rel('noopener noreferrer')
								]),
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$html$Html$text(_user$project$Version$version)
								]))
						]))
				]));
	});
var _user$project$Bracket$matchEnabledOpenrX = F2(
	function (o, bp) {
		return bp.isEnabled && _elm_lang$core$Native_Utils.eq(bp.opener, o);
	});
var _user$project$Bracket$getClosr4 = F2(
	function (o, bmap) {
		return _elm_lang$core$List$head(
			A2(
				_elm_lang$core$List$map,
				function (_) {
					return _.opener;
				},
				A2(
					_elm_lang$core$List$filter,
					_user$project$Bracket$matchEnabledOpenrX(o),
					bmap)));
	});
var _user$project$Bracket$getClosr2 = F2(
	function (o, bmap) {
		var getPair = function (_p5) {
			var _p6 = _p5;
			var _p7 = _p6.isEnabled;
			if (_p7 === true) {
				return {ctor: '_Tuple2', _0: _p6.opener, _1: _p6.closer};
			} else {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.chr(' '),
					_1: _elm_lang$core$Native_Utils.chr(' ')
				};
			}
		};
		return A2(
			_elm_lang$core$Dict$get,
			o,
			_elm_lang$core$Dict$fromList(
				A2(_elm_lang$core$List$map, getPair, bmap)));
	});
var _user$project$Bracket$matchEnabledOpenr = F2(
	function (o, bp) {
		var _p8 = {
			ctor: '_Tuple2',
			_0: bp.isEnabled,
			_1: _elm_lang$core$Native_Utils.eq(bp.opener, o)
		};
		if (((_p8.ctor === '_Tuple2') && (_p8._0 === true)) && (_p8._1 === true)) {
			return _elm_lang$core$Maybe$Just(bp.closer);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Bracket$getClosr = F2(
	function (o, bm) {
		return _elm_lang$core$List$head(
			A2(
				_elm_lang$core$List$filterMap,
				_user$project$Bracket$matchEnabledOpenr(o),
				bm));
	});
var _user$project$Bracket$isClosr = F2(
	function (c, bmap) {
		return A2(
			_elm_lang$core$List$member,
			c,
			A2(
				_elm_lang$core$List$map,
				function (_) {
					return _.closer;
				},
				A2(
					_elm_lang$core$List$filter,
					function (_) {
						return _.isEnabled;
					},
					bmap)));
	});
var _user$project$Bracket$isOpenr = F2(
	function (o, bmap) {
		return A2(
			_elm_lang$core$List$member,
			o,
			A2(
				_elm_lang$core$List$map,
				function (_) {
					return _.opener;
				},
				A2(
					_elm_lang$core$List$filter,
					function (_) {
						return _.isEnabled;
					},
					bmap)));
	});
var _user$project$Bracket$updateS = F2(
	function (s, rec) {
		return _elm_lang$core$Native_Utils.update(
			rec,
			{stack: s});
	});
var _user$project$Bracket$updateE = F2(
	function (e, rec) {
		return _elm_lang$core$Native_Utils.update(
			rec,
			{expression: e});
	});
var _user$project$Bracket$validate = function (model) {
	validate:
	while (true) {
		var _p9 = model;
		var expression = _p9.expression;
		var stack = _p9.stack;
		var bmap = _p9.bmap;
		var _p10 = _user$project$SStack$pop(expression);
		if (_p10.ctor === 'Nothing') {
			return _elm_lang$core$Native_Utils.update(
				model,
				{
					isBalanced: _user$project$SStack$isEmpty(stack)
				});
		} else {
			var _p14 = _p10._0._0;
			var _p13 = _p10._0._1;
			var _p11 = A2(_user$project$Bracket$getClosr, _p14, bmap);
			if (_p11.ctor === 'Just') {
				var _v7 = A2(
					_user$project$Bracket$updateS,
					A2(_user$project$SStack$pushC, _p11._0, stack),
					A2(_user$project$Bracket$updateE, _p13, model));
				model = _v7;
				continue validate;
			} else {
				if (_elm_lang$core$Native_Utils.eq(
					A2(_user$project$Bracket$isClosr, _p14, bmap),
					true)) {
					var _p12 = _user$project$SStack$pop(stack);
					if (_p12.ctor === 'Just') {
						if (_elm_lang$core$Native_Utils.eq(_p12._0._0, _p14)) {
							var _v9 = A2(
								_user$project$Bracket$updateS,
								_p12._0._1,
								A2(_user$project$Bracket$updateE, _p13, model));
							model = _v9;
							continue validate;
						} else {
							return _elm_lang$core$Native_Utils.update(
								model,
								{isValid: false});
						}
					} else {
						return _elm_lang$core$Native_Utils.update(
							model,
							{isBalanced: false});
					}
				} else {
					var _v10 = _elm_lang$core$Native_Utils.update(
						model,
						{expression: _p13});
					model = _v10;
					continue validate;
				}
			}
		}
	}
};
var _user$project$Bracket$validateString = function (model) {
	var res = _user$project$Bracket$validate(model);
	return res;
};
var _user$project$Bracket$update = F2(
	function (msg, model) {
		var _p15 = msg;
		switch (_p15.ctor) {
			case 'NoOp':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'UpdateExpression':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{expression: _p15._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Mark':
				var updateEntry = function (e) {
					return _elm_lang$core$Native_Utils.eq(e.id, _p15._0) ? _elm_lang$core$Native_Utils.update(
						e,
						{
							isEnabled: _elm_lang$core$Basics$not(e.isEnabled)
						}) : e;
				};
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							bmap: A2(_elm_lang$core$List$map, updateEntry, model.bmap)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'MouseMsg':
				var _p16 = _p15._0;
				var x = _p16.x;
				var y = _p16.y;
				var onHeader = (_elm_lang$core$Native_Utils.cmp(x, 800) < 0) && (_elm_lang$core$Native_Utils.cmp(y, 60) < 0);
				var _p17 = onHeader;
				if (_p17 === true) {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								showBracket: _elm_lang$core$Basics$not(model.showBracket),
								showStack: _elm_lang$core$Basics$not(model.showStack)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			default:
				var _p18 = _p15._0;
				switch (_p18) {
					case 2:
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									showBracket: _elm_lang$core$Basics$not(model.showBracket)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 17:
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									showStack: _elm_lang$core$Basics$not(model.showStack)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					default:
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
		}
	});
var _user$project$Bracket$newPair = F4(
	function (op, cl, en, id) {
		return {opener: op, closer: cl, isEnabled: en, id: id};
	});
var _user$project$Bracket$initialModel = {
	stack: _user$project$SStack$empty,
	isBalanced: true,
	isValid: true,
	expression: '',
	bmap: _elm_lang$core$Native_List.fromArray(
		[
			A4(
			_user$project$Bracket$newPair,
			_elm_lang$core$Native_Utils.chr('('),
			_elm_lang$core$Native_Utils.chr(')'),
			true,
			1),
			A4(
			_user$project$Bracket$newPair,
			_elm_lang$core$Native_Utils.chr('{'),
			_elm_lang$core$Native_Utils.chr('}'),
			true,
			2),
			A4(
			_user$project$Bracket$newPair,
			_elm_lang$core$Native_Utils.chr('<'),
			_elm_lang$core$Native_Utils.chr('>'),
			true,
			3)
		]),
	showStack: true,
	showBracket: true
};
var _user$project$Bracket$init = {ctor: '_Tuple2', _0: _user$project$Bracket$initialModel, _1: _elm_lang$core$Platform_Cmd$none};
var _user$project$Bracket$BPair = F4(
	function (a, b, c, d) {
		return {opener: a, closer: b, isEnabled: c, id: d};
	});
var _user$project$Bracket$Model = F7(
	function (a, b, c, d, e, f, g) {
		return {expression: a, stack: b, bmap: c, isBalanced: d, isValid: e, showBracket: f, showStack: g};
	});
var _user$project$Bracket$KeyMsg = function (a) {
	return {ctor: 'KeyMsg', _0: a};
};
var _user$project$Bracket$MouseMsg = function (a) {
	return {ctor: 'MouseMsg', _0: a};
};
var _user$project$Bracket$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$mouse$Mouse$clicks(_user$project$Bracket$MouseMsg),
				_elm_lang$keyboard$Keyboard$presses(_user$project$Bracket$KeyMsg)
			]));
};
var _user$project$Bracket$Mark = function (a) {
	return {ctor: 'Mark', _0: a};
};
var _user$project$Bracket$entryItem = function (entry) {
	return A2(
		_elm_lang$html$Html$li,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$classList(
				_elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: 'highlight', _1: entry.isEnabled}
					])),
				_elm_lang$html$Html_Events$onClick(
				_user$project$Bracket$Mark(entry.id))
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$span,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('phrase')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						_elm_lang$core$String$fromChar(entry.opener))
					])),
				A2(
				_elm_lang$html$Html$span,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('points')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						_elm_lang$core$String$fromChar(entry.closer))
					]))
			]));
};
var _user$project$Bracket$entryList = F2(
	function (display, entries) {
		var entryItems = display ? A2(_elm_lang$core$List$map, _user$project$Bracket$entryItem, entries) : _elm_lang$core$Native_List.fromArray(
			[]);
		return A2(
			_elm_lang$html$Html$ul,
			_elm_lang$core$Native_List.fromArray(
				[]),
			entryItems);
	});
var _user$project$Bracket$UpdateExpression = function (a) {
	return {ctor: 'UpdateExpression', _0: a};
};
var _user$project$Bracket$entryForm = function (model) {
	var res = _user$project$Bracket$validateString(model);
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$input,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$type$('text'),
						_elm_lang$html$Html_Attributes$placeholder('{( () )}'),
						_elm_lang$html$Html_Attributes$value(model.expression),
						_elm_lang$html$Html_Attributes$name('phrase'),
						_elm_lang$html$Html_Attributes$autofocus(true),
						_elm_lang$html$Html_Events$onInput(_user$project$Bracket$UpdateExpression),
						_user$project$Bracket$strStyle
					]),
				_elm_lang$core$Native_List.fromArray(
					[])),
				A2(
				_elm_lang$html$Html$h2,
				_elm_lang$core$Native_List.fromArray(
					[_user$project$Bracket$revStyle]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							model.expression,
							_user$project$Bracket$isValid(res)))
					])),
				A2(_user$project$Bracket$stackHeader, model.showStack, res.stack),
				A2(_user$project$Bracket$stackList, model.showStack, res.stack)
			]));
};
var _user$project$Bracket$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$id('container')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Bracket$pageHeader,
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$id('wrapper')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$id('first')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_user$project$Bracket$entryForm(model)
							])),
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$id('second')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_user$project$Bracket$bracketHeader(model.showBracket),
								A2(_user$project$Bracket$entryList, model.showBracket, model.bmap),
								_user$project$Bracket$pageFooter
							]))
					]))
			]));
};
var _user$project$Bracket$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Bracket$init, update: _user$project$Bracket$update, view: _user$project$Bracket$view, subscriptions: _user$project$Bracket$subscriptions})
};
var _user$project$Bracket$NoOp = {ctor: 'NoOp'};
